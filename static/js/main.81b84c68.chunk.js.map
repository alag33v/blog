{"version":3,"sources":["api/api.ts","redux/ducks/postsDucks.ts","styles/components/StyledHome.ts","components/Home.tsx","styles/components/StyledPostItem.ts","components/PostItem.tsx","styles/GlobalStyle.ts","App.tsx","redux/ducks/index.ts","redux/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","postsAPI","get","response","data","newObj","post","id","delete","obj","put","commentsAPI","ADD_POSTS","NEW_POST","DELETE_POST","EDIT_POST","ADD_COMMENT","CREATE_COMMENT","initialState","posts","title","body","comments","deletePost","type","payload","editPost","newComment","StyledHome","styled","div","Home","useState","setTitle","setBody","useSelector","state","dispatch","useDispatch","history","useHistory","useEffect","a","toast","error","message","onEdit","trim","success","removePost","className","onChange","e","target","value","onClick","uuid","createNewPost","map","push","StyledPostItem","PostItem","match","postInfo","filter","toString","params","comment","postId","GlobalStyle","createGlobalStyle","normalize","App","exact","path","component","rootReducer","combineReducers","action","index","findIndex","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81b84c68.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { Post, Comment } from '../types';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://bloggy-api.herokuapp.com',\r\n});\r\n\r\nexport const postsAPI = {\r\n  async fetchPosts(): Promise<Post[]> {\r\n    const response = await instance.get('/posts');\r\n    return response.data;\r\n  },\r\n  async addPost(newObj: Post): Promise<Post> {\r\n    const response = await instance.post('/posts', newObj);\r\n    return response.data;\r\n  },\r\n  async deletePost(id: number | string): Promise<string> {\r\n    const response = await instance.delete(`/posts/${id}`);\r\n    return response.data;\r\n  },\r\n  async editPost(obj: Post): Promise<Post> {\r\n    const response = await instance.put(`/posts/${obj.id}`, obj);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const commentsAPI = {\r\n  async fetchComments(id: number | string): Promise<Post> {\r\n    const response = await instance.get(`/posts/${id}?_embed=comments`);\r\n    return response.data;\r\n  },\r\n  async addComments(id: number | string, newObj: Comment): Promise<Comment> {\r\n    const response = await instance.post(`/posts/${id}/comments`, newObj);\r\n    return response.data;\r\n  },\r\n};\r\n","/* eslint-disable import/no-cycle */\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { toast } from 'react-toastify';\r\nimport { AppStateType } from './index';\r\nimport { Post, Comment } from '../../types';\r\nimport { postsAPI, commentsAPI } from '../../api/api';\r\n\r\n// Actions\r\nconst ADD_POSTS = 'posts/ADD_POSTS';\r\nconst NEW_POST = 'posts/NEW_POST';\r\nconst DELETE_POST = 'posts/DELETE_POST';\r\nconst EDIT_POST = 'posts/EDIT_POST';\r\nconst ADD_COMMENT = 'posts/ADD_COMMENT';\r\nconst CREATE_COMMENT = 'posts/CREATE_COMMENT';\r\n\r\n// Reducer\r\ntype InitialStateType = {\r\n  posts: Post[];\r\n  post: Post;\r\n};\r\n\r\nconst initialState: InitialStateType = {\r\n  posts: [],\r\n  post: {\r\n    id: '',\r\n    title: '',\r\n    body: '',\r\n    comments: [],\r\n  },\r\n};\r\n\r\ntype ActionsType =\r\n  | AddPostsType\r\n  | NewPostType\r\n  | DeletePostType\r\n  | EditPostType\r\n  | AddCommentType\r\n  | NewCommentType;\r\n\r\nexport const postsReducer = (\r\n  state = initialState,\r\n  action: ActionsType,\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case ADD_POSTS:\r\n      return { ...state, posts: action.payload };\r\n    case NEW_POST:\r\n      return { ...state, posts: [...state.posts, action.payload] };\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts.filter((post) => post.id !== action.payload)],\r\n      };\r\n    case EDIT_POST: {\r\n      const posts = [...state.posts];\r\n      const index = posts.findIndex((post) => post.id === action.payload.id);\r\n      posts[index] = { ...action.payload };\r\n      return { posts, post: state.post };\r\n    }\r\n    case ADD_COMMENT:\r\n      return { ...state, post: action.payload };\r\n    case CREATE_COMMENT:\r\n      return {\r\n        ...state,\r\n        post: {\r\n          ...state.post,\r\n          comments: [...state.post.comments, action.payload],\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Action Creators\r\ntype AddPostsType = {\r\n  type: typeof ADD_POSTS;\r\n  payload: Post[];\r\n};\r\n\r\nconst addPosts = (arr: Post[]): AddPostsType => ({\r\n  type: ADD_POSTS,\r\n  payload: arr,\r\n});\r\n\r\ntype NewPostType = {\r\n  type: typeof NEW_POST;\r\n  payload: Post;\r\n};\r\n\r\nconst newPost = (obj: Post): NewPostType => ({\r\n  type: NEW_POST,\r\n  payload: obj,\r\n});\r\n\r\ntype DeletePostType = {\r\n  type: typeof DELETE_POST;\r\n  payload: number | string;\r\n};\r\n\r\nconst deletePost = (id: number | string): DeletePostType => ({\r\n  type: DELETE_POST,\r\n  payload: id,\r\n});\r\n\r\ntype EditPostType = {\r\n  type: typeof EDIT_POST;\r\n  payload: Post;\r\n};\r\n\r\nconst editPost = (obj: Post): EditPostType => ({\r\n  type: EDIT_POST,\r\n  payload: obj,\r\n});\r\n\r\ntype AddCommentType = {\r\n  type: typeof ADD_COMMENT;\r\n  payload: Post;\r\n};\r\n\r\nconst addComments = (obj: Post): AddCommentType => ({\r\n  type: ADD_COMMENT,\r\n  payload: obj,\r\n});\r\n\r\ntype NewCommentType = {\r\n  type: typeof CREATE_COMMENT;\r\n  payload: Comment;\r\n};\r\n\r\nconst newComment = (obj: Comment): NewCommentType => ({\r\n  type: CREATE_COMMENT,\r\n  payload: obj,\r\n});\r\n\r\n// Thunks\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>;\r\n\r\nexport const getPosts = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    const data = await postsAPI.fetchPosts();\r\n    dispatch(addPosts(data));\r\n  } catch (error) {\r\n    toast.error(error.message);\r\n  }\r\n};\r\n\r\nexport const createNewPost = (newObj: Post): ThunkType => async (dispatch) => {\r\n  try {\r\n    const data = await postsAPI.addPost(newObj);\r\n    dispatch(newPost(data));\r\n    toast.success('Post created');\r\n  } catch (error) {\r\n    toast.error(error.message);\r\n  }\r\n};\r\n\r\nexport const removePost = (id: number | string): ThunkType => async (\r\n  dispatch,\r\n) => {\r\n  try {\r\n    postsAPI.deletePost(id);\r\n    dispatch(deletePost(id));\r\n    toast.success('Post deleted');\r\n  } catch (error) {\r\n    toast.error(error.message);\r\n  }\r\n};\r\n\r\nexport const changePost = (obj: Post): ThunkType => async (dispatch) => {\r\n  try {\r\n    const data = await postsAPI.editPost(obj);\r\n    dispatch(editPost(data));\r\n    toast.success('Post edited');\r\n  } catch (error) {\r\n    toast.error(error.message);\r\n  }\r\n};\r\n\r\nexport const getComments = (id: number | string): ThunkType => async (\r\n  dispatch,\r\n) => {\r\n  try {\r\n    const data = await commentsAPI.fetchComments(id);\r\n    dispatch(addComments(data));\r\n  } catch (error) {\r\n    toast.error(error.message);\r\n  }\r\n};\r\n\r\nexport const createNewComment = (\r\n  id: number | string,\r\n  obj: Comment,\r\n): ThunkType => async (dispatch) => {\r\n  try {\r\n    const data = await commentsAPI.addComments(id, obj);\r\n    toast.success('Comment created');\r\n    dispatch(newComment(data));\r\n  } catch (error) {\r\n    toast.error(error.message);\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledHome = styled.div`\r\n  h1 {\r\n    font-size: 50px;\r\n    text-align: center;\r\n\r\n    @media (max-width: 365px) {\r\n      font-size: 40px;\r\n    }\r\n  }\r\n\r\n  .title__input {\r\n    width: 500px;\r\n    max-width: 100%;\r\n    height: 40px;\r\n    color: #fff;\r\n    background-color: transparent;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    margin: 0 auto 25px;\r\n    padding: 0 15px;\r\n    display: block;\r\n  }\r\n\r\n  .body__textarea {\r\n    width: 600px;\r\n    max-width: 100%;\r\n    height: 200px;\r\n    color: #fff;\r\n    background-color: transparent;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    margin: 0 auto 25px;\r\n    padding: 15px;\r\n    display: block;\r\n    resize: none;\r\n  }\r\n\r\n  .create__btn {\r\n    font-size: 24px;\r\n    color: rgb(255, 255, 255);\r\n    background-color: rgb(135, 206, 250);\r\n    margin: 0 auto 25px;\r\n    padding: 7px 20px;\r\n    border-radius: 5px;\r\n    width: 300px;\r\n    max-width: 100%;\r\n    height: 40px;\r\n    display: block;\r\n    border: none;\r\n    transition: 0.3s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      background-color: rgb(108 186 235);\r\n    }\r\n\r\n    &:active {\r\n      background-color: rgb(71 181 250);\r\n    }\r\n  }\r\n\r\n  .posts__list {\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    .post__item {\r\n      width: 600px;\r\n      max-width: 100%;\r\n      margin: 0 auto 25px;\r\n      padding: 15px 0;\r\n      border: 1px dashed #ccc;\r\n      border-radius: 5px;\r\n      position: relative;\r\n\r\n      &-title {\r\n        font-size: 24px;\r\n        text-align: center;\r\n        border-bottom: 1px dashed #ccc;\r\n        margin: 0 0 15px;\r\n        padding: 5px 60px 15px;\r\n      }\r\n\r\n      &-body {\r\n        font-size: 18px;\r\n        line-height: 1.3;\r\n        text-align: justify;\r\n        border-bottom: 1px dashed #ccc;\r\n        margin: 5px 0 16px;\r\n        padding: 5px 25px 15px;\r\n      }\r\n\r\n      .edit {\r\n        font-size: 20px;\r\n        fill: #ccc;\r\n        top: 7px;\r\n        right: 34px;\r\n        position: absolute;\r\n        transition: 0.3s;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n          fill: #fff;\r\n        }\r\n      }\r\n\r\n      .remove {\r\n        font-size: 24px;\r\n        fill: #ccc;\r\n        top: 5px;\r\n        right: 5px;\r\n        position: absolute;\r\n        transition: 0.3s;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n          fill: #fff;\r\n        }\r\n      }\r\n\r\n      .more__btn {\r\n        color: rgb(255, 255, 255);\r\n        background-color: rgb(135, 206, 250);\r\n        margin: 0 auto;\r\n        border-radius: 5px;\r\n        width: 200px;\r\n        max-width: 100%;\r\n        height: 34px;\r\n        display: block;\r\n        border: none;\r\n        transition: 0.3s;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n          background-color: rgb(108 186 235);\r\n        }\r\n\r\n        &:active {\r\n          background-color: rgb(71 181 250);\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { FC, useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { toast } from 'react-toastify';\r\nimport { TiDeleteOutline } from 'react-icons/ti';\r\nimport { MdModeEdit } from 'react-icons/md';\r\nimport { AppStateType } from '../redux/ducks';\r\nimport {\r\n  getPosts,\r\n  createNewPost,\r\n  removePost,\r\n  changePost,\r\n} from '../redux/ducks/postsDucks';\r\nimport { Post } from '../types';\r\nimport { StyledHome } from '../styles/components/StyledHome';\r\n\r\nconst Home: FC = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [body, setBody] = useState('');\r\n  const { posts } = useSelector((state: AppStateType) => state.posts);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    dispatch(getPosts());\r\n  }, []);\r\n\r\n  const addNewPost = () => {\r\n    if (title.trim() && body.trim()) {\r\n      const newObj: Post = {\r\n        id: uuid(),\r\n        title,\r\n        body,\r\n      };\r\n      dispatch(createNewPost(newObj));\r\n      setTitle('');\r\n      setBody('');\r\n    } else {\r\n      toast.error('Enter your message');\r\n    }\r\n  };\r\n\r\n  const onEdit = (id: number | string) => {\r\n    if (title.trim() && body.trim()) {\r\n      const newObj = {\r\n        id,\r\n        title,\r\n        body,\r\n      };\r\n      dispatch(changePost(newObj));\r\n      setTitle('');\r\n      setBody('');\r\n    } else {\r\n      toast.error('Enter your message');\r\n    }\r\n  };\r\n\r\n  const deletePost = (id: number | string) => {\r\n    dispatch(removePost(id));\r\n  };\r\n\r\n  const onMore = (id: number | string) => {\r\n    history.push(`/blog/${id}`);\r\n  };\r\n\r\n  return (\r\n    <StyledHome>\r\n      <h1>Messages</h1>\r\n      <input\r\n        className=\"title__input\"\r\n        type=\"text\"\r\n        onChange={(e) => setTitle(e.target.value)}\r\n        value={title}\r\n      />\r\n      <textarea\r\n        className=\"body__textarea\"\r\n        onChange={(e) => setBody(e.target.value)}\r\n        value={body}\r\n      />\r\n      <button className=\"create__btn\" type=\"button\" onClick={addNewPost}>\r\n        Create Post\r\n      </button>\r\n      <ul className=\"posts__list\">\r\n        {posts.map((post) => (\r\n          <li className=\"post__item\" key={post.id}>\r\n            <h3 className=\"post__item-title\">{post.title}</h3>\r\n            <p className=\"post__item-body\">{post.body}</p>\r\n            <MdModeEdit className=\"edit\" onClick={() => onEdit(post.id)} />\r\n            <TiDeleteOutline\r\n              className=\"remove\"\r\n              onClick={() => deletePost(post.id)}\r\n            />\r\n            <button\r\n              className=\"more__btn\"\r\n              type=\"button\"\r\n              onClick={() => onMore(post.id)}\r\n            >\r\n              More\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>{' '}\r\n    </StyledHome>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledPostItem = styled.div`\r\n  position: relative;\r\n\r\n  h1 {\r\n    font-size: 50px;\r\n    text-align: center;\r\n\r\n    @media (max-width: 365px) {\r\n      font-size: 40px;\r\n    }\r\n  }\r\n\r\n  .post {\r\n    width: 600px;\r\n    max-width: 100%;\r\n    margin: 0 auto 25px;\r\n    padding: 15px 0 10px;\r\n    border: 1px dashed #ccc;\r\n    border-radius: 5px;\r\n    position: relative;\r\n\r\n    &__title {\r\n      font-size: 24px;\r\n      text-align: center;\r\n      padding: 0 25px 15px;\r\n      margin: 0 0 15px;\r\n      border-bottom: 1px dashed #ccc;\r\n    }\r\n\r\n    &__body {\r\n      font-size: 18px;\r\n      line-height: 1.3;\r\n      text-align: justify;\r\n      margin: 5px 0;\r\n      padding: 0 25px;\r\n    }\r\n  }\r\n\r\n  h2 {\r\n    font-size: 40px;\r\n    text-align: center;\r\n  }\r\n\r\n  .comment__textarea {\r\n    width: 600px;\r\n    max-width: 100%;\r\n    height: 200px;\r\n    color: #fff;\r\n    background-color: transparent;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    margin: 0 auto 25px;\r\n    padding: 15px;\r\n    display: block;\r\n    resize: none;\r\n  }\r\n\r\n  .comment__btn {\r\n    font-size: 24px;\r\n    color: rgb(255, 255, 255);\r\n    background-color: rgb(135, 206, 250);\r\n    margin: 0 auto 25px;\r\n    padding: 7px 20px;\r\n    border-radius: 5px;\r\n    width: 300px;\r\n    max-width: 100%;\r\n    height: 40px;\r\n    display: block;\r\n    border: none;\r\n    transition: 0.3s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      background-color: rgb(108 186 235);\r\n    }\r\n\r\n    &:active {\r\n      background-color: rgb(71 181 250);\r\n    }\r\n  }\r\n\r\n  .comments__list {\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    .comment__item {\r\n      line-height: 1.3;\r\n      width: 600px;\r\n      max-width: 100%;\r\n      margin: 0 auto 25px;\r\n      padding: 15px 25px;\r\n      border: 1px dashed #ccc;\r\n      border-radius: 5px;\r\n      position: relative;\r\n    }\r\n  }\r\n\r\n  .back {\r\n    font-size: 30px;\r\n    fill: #ccc;\r\n    top: 0;\r\n    left: 0;\r\n    position: absolute;\r\n    transition: 0.3s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      fill: #fff;\r\n    }\r\n  }\r\n`;\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { RouteComponentProps, useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { toast } from 'react-toastify';\r\nimport { MdKeyboardBackspace } from 'react-icons/md';\r\nimport { AppStateType } from '../redux/ducks';\r\nimport { getComments, createNewComment } from '../redux/ducks/postsDucks';\r\nimport { Comment } from '../types';\r\nimport { StyledPostItem } from '../styles/components/StyledPostItem';\r\n\r\ntype Props = {\r\n  id: string;\r\n};\r\n\r\nconst PostItem: FC<RouteComponentProps<Props>> = ({\r\n  match,\r\n}: RouteComponentProps<Props>) => {\r\n  const [body, setBody] = useState('');\r\n  const { posts, post: postInfo } = useSelector(\r\n    (state: AppStateType) => state.posts,\r\n  );\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const postsFilter = posts.filter(\r\n    (post) => post.id.toString() === match.params.id,\r\n  );\r\n\r\n  const post = postsFilter[0];\r\n\r\n  useEffect(() => {\r\n    dispatch(getComments(post.id));\r\n  }, [post]);\r\n\r\n  const addComment = () => {\r\n    if (body.trim()) {\r\n      const newObj: Comment = {\r\n        postId: uuid(),\r\n        body,\r\n      };\r\n      dispatch(createNewComment(post.id, newObj));\r\n      setBody('');\r\n    } else {\r\n      toast.error('Enter your message');\r\n    }\r\n  };\r\n\r\n  const onComeBack = () => {\r\n    history.push('/blog');\r\n  };\r\n\r\n  return (\r\n    <StyledPostItem>\r\n      <h1>Message</h1>\r\n      <div className=\"post\">\r\n        <h3 className=\"post__title\">{postInfo.title}</h3>\r\n        <p className=\"post__body\">{postInfo.body}</p>\r\n      </div>\r\n      <h2>Comments</h2>\r\n      <ul className=\"comments__list\">\r\n        {postInfo &&\r\n          postInfo.comments.map((comment) => (\r\n            <li\r\n              className=\"comment__item\"\r\n              key={`${comment.postId}_${comment.id}`}\r\n            >\r\n              {comment.body}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      <textarea\r\n        className=\"comment__textarea\"\r\n        onChange={(e) => setBody(e.target.value)}\r\n        value={body}\r\n      />\r\n      <button className=\"comment__btn\" type=\"button\" onClick={addComment}>\r\n        Add Comment\r\n      </button>\r\n      <MdKeyboardBackspace className=\"back\" onClick={onComeBack} />\r\n    </StyledPostItem>\r\n  );\r\n};\r\n\r\nexport default PostItem;\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport { normalize } from 'styled-normalize';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  ${normalize}\r\n\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  *,\r\n  *:before,\r\n  *:after {\r\n    box-sizing: inherit;\r\n  }\r\n  \r\n  body {\r\n    font-family: 'Open Sans', sans-serif;\r\n    max-width: 1200px;\r\n    padding: 0 25px;\r\n    margin: 0 auto;\r\n    color: #fff;\r\n    background-color: #080808;\r\n    min-height: 100vh;\r\n  }\r\n`;\r\n","import React, { FC } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport { Home, PostItem } from './components';\nimport { GlobalStyle } from './styles/GlobalStyle';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const App: FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/blog\" component={Home} />\n        <Route exact path=\"/blog/:id\" component={PostItem} />\n      </Switch>\n      <GlobalStyle />\n      <ToastContainer />\n    </Router>\n  );\n};\n","/* eslint-disable import/no-cycle */\r\nimport { combineReducers } from 'redux';\r\n\r\nimport { postsReducer } from './postsDucks';\r\n\r\nconst rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './ducks';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk)),\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}